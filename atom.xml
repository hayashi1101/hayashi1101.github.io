<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hayashi1101.github.io</id>
    <title>？？？</title>
    <updated>2022-09-09T00:28:20.992Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://hayashi1101.github.io"/>
    <link rel="self" href="https://hayashi1101.github.io/atom.xml"/>
    <subtitle>不被公开的月台档案</subtitle>
    <logo>https://hayashi1101.github.io/images/avatar.png</logo>
    <icon>https://hayashi1101.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, ？？？</rights>
    <entry>
        <title type="html"><![CDATA[你为什么能做一个二维视频]]></title>
        <id>https://hayashi1101.github.io/post/ni-wei-shi-me-neng-zuo-yi-ge-er-wei-shi-pin/</id>
        <link href="https://hayashi1101.github.io/post/ni-wei-shi-me-neng-zuo-yi-ge-er-wei-shi-pin/">
        </link>
        <updated>2021-11-11T14:33:54.000Z</updated>
        <content type="html"><![CDATA[<h2 id="这是什么">这是什么</h2>
<p>这篇文章的契机是几个月之前和一个做AMV的朋友聊天，他做了一个简单的普通迪斯科的MG动画。然后发现里面应该有一个摄像头从斜上降到水平的场景（也有可能是水平升上斜上的场景记不清了）。然后惊奇地发现图像的视角变了但是文字是静止的，问了才知道是通过旋转图像x轴来完成一个看上去像是视角转换的场景，他并不会摄像机的使用。于是当时我问下了这个问题。</p>
<p>当然能够问出这个问题也只是因为涉及的方面不同导致的些许的理论上的优势而已，不过是在映像制作中对于屏幕有更加深刻的把握而已。现在来解释这个问题——当我们在做视频的时候我们到底在做什么？</p>
<h2 id="1">1</h2>
<p>混剪人说我把视频导进软件里面然后把视频剪辑了加上过场了把视频的画面改变了然后导出了。MG人说我在里面放了一个图形然后给它一个动作多做几遍然后导出了。</p>
<p>实际上不管怎么说我们都在做一件事：在一个虚拟机里面摆放物件。如果你的软件里面左右是x轴，上下是y轴，你把视频z轴拉大拉小视频会变大变小的话，那么就请想象出这样一个三维空间：x轴为水平线方向，y轴为竖直线方向，z轴指向你自己——就是这样一个虚拟空间。</p>
<p>现在我们在里面放一些东西吧，我们放一个视频进去，这个空间会变成什么样呢？没错，可能与常识不同，并不是眼前摆了一个视频，而是看哪，这个广阔浩大的空间里面悬浮着一个竖着的像一张纸一样的东西像屏幕一样在播放视频。<br>
<img src="https://hayashi1101.github.io/post-images/1662042899232.png" alt="" loading="lazy"><br>
就像这样，不用担心重力在里面摆放各种物件。摆放一个悬浮着的文字，摆放一个具有自定义贝塞尔曲线的运动的圆。<br>
<img src="https://hayashi1101.github.io/post-images/1662042906833.png" alt="" loading="lazy"><br>
于是这个视频文件有了伙伴，整个虚拟空间变得热闹起来了。可喜可贺可喜可贺。</p>
<h2 id="2">2</h2>
<p>不对啊！那我们看到的做完的视频是什么呢？</p>
<p>大家看过皮影戏吗？各种道具场景和小人摆在屏幕后面，不管后面多么闹腾，不管后面那个房子究竟是一个真的立体盒子还是一张纸我们不管，我们只看白屏上的内容。</p>
<p>大家在小学的时候玩过班上的多媒体展示台吗？我们在上面摆放各种物件和不及格的试卷，最后看的同样是屏幕。</p>
<p>实在没有，大家用眼睛看过东西吗？最终是呈在视网膜上面的像被大脑识别而不必把整栋房子塞进我们的大脑中。</p>
<p>不管我们怎么摆放物件，我们都不会把所有物件拿出来直接给别人看，毕竟做一个MG动画要拿着各个几何图形像皮影戏一样运动的话也挺耗人的。我喜欢这个人来人往的景象，我要把它分享给我的好友，我不会召集这一群人等着我朋友来再走一遍，而是拿摄像机来将这一切的像存储下来发送给我的好友。成像就成了关键，而怎么成像呢？那就是摄像机。</p>
<h2 id="二维视频制作中看不见的默认摄像机">二维视频制作中看不见的默认摄像机</h2>
<p>摄像机这一概念对于做3d视频的人来说已经是不可舍弃的，但是对于做2d视频的人来说即使没有听说过摄像机这个概念也能够把视频做好。但是在不知不觉中，摄像机一定会被使用到，因为在没有引入新的摄像机的时候，我们所看到的的屏幕，就是一个默认摄像机拍下来的画面。</p>
<p>在各种视频制作软件中，这个摄像机的摆放恰到好处：做1080P的视频的时候我们放入一个1080P的视频放在Z=0的地方，那么这个视频刚好能够被我们看全。就好像在一个画布上面画出这个视频一样。摄像机捕获那个视频的像，投影到屏幕上面，我们用这个像渲染导出新的视频。</p>
<p>很多人会把2d视频的制作直接理解为在画布桌面上面摆满东西也是可以理解的，毕竟没有新增的摄像机的话在默认摄像机里面没有3d的概念，遮挡全靠层，Z只用来调整一定的大小以及“动的快慢和别的物件不同来做出3d的感觉”。</p>
<p>但是如果真的要在这里做出进阶的话，请把这块画板竖起来，放在那个无重力的虚拟空间里面去理解里面每一个物件的运动，用摄像机去捕获新的角度。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CD25]]></title>
        <id>https://hayashi1101.github.io/post/cd25/</id>
        <link href="https://hayashi1101.github.io/post/cd25/">
        </link>
        <updated>2021-11-03T14:13:40.000Z</updated>
        <content type="html"><![CDATA[<p>托人寄了一份CD的场刊过来，一本书（虽然页数有些少），一个纸袋，几张周边，就当是逛了这一次的同人展了。</p>
<figure data-type="image" tabindex="1"><img src="https://hayashi1101.github.io/post-images/1662041669136.jpg" alt="" loading="lazy"></figure>
<p>持续逛同人展（特指COMIDAY）是从高中开始的，和同学一起在里面逛一天，逛完晚上看电影。高中正是做术力口的狂热时期，逛展的时候也基本上是按着VOCALOID的音乐摊一家一家扫过去的。当时的VOCALOID二创作同人画集的特别多，但是做专辑的数量并不多，见过的就平行四界初心社和稔盛望官方摊位还有一堆寄售其他社团的鸽子，再加上几个海外的社团。</p>
<p>当时逛展子要跑到非遗公园和新城区的会展中心那边基本就是地铁穿个城跑终点站的距离。于是早上五六点钟起床打的坐到火车北站地铁口，坐去那边差不多是早上7点钟。CD不让排夜场，但是为了限定周边7点钟就已经排起人了，于是也一起排着一边背单词做作业等到同学来再等到九点多开场。</p>
<p>逛展前一个晚上就翻完官方的参展动态，把感兴趣的社团都标记一圈，把预算先算出来甚至零钱都准备好准备拿起本子放下钱就跑下一家（当时也没有智能手机，但是基于场地极其糟糕的信号还是零钱来得快），在地图上把最短路线画好。第二天进场安检完速度跑向限定场，然后跑向官方场刊，顺着路线一家一家跑，差不多10分钟就能够把想买的都买到，然后接下来的几个小时就是闲逛时间了。边聊天边看看其他有趣的摊位。</p>
<p>印象深的有一个社团把成都的二次元场地(?)做了一份大的城市地图来卖。一个做术曲（主要是IA和ONE）专辑的海外社团的小哥哥特别可爱，两次去找他签名都会笑着说好多东西（虽然听个半懂）。AVG专区全是严肃otaku不敢去盖印章于是拿痛衣给同学交换代盖。甚至有一届能够看到narcissus的摊位而且还排满人。</p>
<figure data-type="image" tabindex="2"><img src="https://hayashi1101.github.io/post-images/1662041678956.jpg" alt="" loading="lazy"></figure>
<p>之前某一届的成果，老年机时代唯一留下来的一张CD的影子<br>
每一次逛完回家都会写手记，会写很多东西，灵感泉涌。似乎只有在那样一个看上去不是那么真实的环境下才会想到一些。第一次人生有了非提前制定的目标是因为发现原来自己也可以做到。初次看术曲周刊的时候发现弹幕并不在歌姬而在于P主，这个时候才发现原来一首歌的制作并不是远到明星和企业，就是我这样的普通人也可以完成，于是在这样的契机上开始了尝试。那时资源没有现在这么唾手可得，都藏在各种论坛里面；纸片人也没有像现在这样被发现商机被尝试广传，加上还要补课，于是开始几年都不敢外说，在网友的交流中持续着创作。</p>
<p>尽管知道世界上一定有同好，但是直到站在那里才感受到知道周围这么多人共同爱好着这个领域，在各自的圈子里面进行创作并且乐于向他人展示交流是一种多么激动的感觉。当时的我也决定再次出现在这个地方的时候想要作为创作者与他人交流。</p>
<p>很遗憾，大学之后就没有再参加本地的同人展了。本来有希望的时隔两年的今年暑假也因为成都的本地疫情取消了。不过之后的每一次同人展都会找人带一份场刊过来。现在大陆这方面的纸质杂志基本上所剩无几了，而CD的场刊在这里无疑是质量上乘的（最近见过的其他能够称得上高质量的也就只有只出过三期的AVG SPIRITS了），里面的每一篇约稿采访都能看出执笔者对于这个圈子学术般认真的态度。而且甚至能够在里面找到更早（小学）时见过的展子和游戏馆。不仅带有现实中的老成都情怀，也让我发现更多圈子里上世纪考古人的身影（或许对于他们来说只是想要找寻童年的痕迹吧）。</p>
<p>个人觉得嗅觉应该是最能够唤起人记忆的感觉。虽然封面不同，但开封这份场刊的时候，几年未有过的新印刷杂志特有的油墨味又把我带进了两手拿着纸袋背着书包在场地里奔跑的那几年，似乎又看到了创作者一起交流的场景。很欣慰这份新油墨味确实是新的，证明那里确实有这样的圈子，还有这样的氛围存在着。</p>
<figure data-type="image" tabindex="3"><img src="https://hayashi1101.github.io/post-images/1662041686281.webp" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[AviUtl的一些看上去不错的辅助插件]]></title>
        <id>https://hayashi1101.github.io/post/aviutl-de-yi-xie-kan-shang-qu-bu-cuo-de-fu-zhu-cha-jian/</id>
        <link href="https://hayashi1101.github.io/post/aviutl-de-yi-xie-kan-shang-qu-bu-cuo-de-fu-zhu-cha-jian/">
        </link>
        <updated>2021-10-21T14:31:26.000Z</updated>
        <content type="html"><![CDATA[<p>一般情况下使用基础的AUL套件就能够完成剪辑任务了。所以以下的内容作为锦上添花也许会对工作流程等有一定提高(实话说我一开始用英文版的用了几年都不知道插件添加但依旧完成了许多视频的制作)。所以以下的内容没有标注“重要”的话直接跳过是没事的。</p>
<h2 id="外观">外观</h2>
<h3 id="seekbar"><a href="https://aoytsk.blog.jp/aviutl/613302.html">seekbar</a>（★★）</h3>
<p>鼠标放在进度条上面就会有一个youtube一样的预览小窗口。</p>
<p>把auf文件放在Plugins里面完成安装</p>
<h3 id="文件管理器媒体池"><a href="https://aoytsk.blog.jp/aviutl/1151849.html">文件管理器(媒体池)</a>（★）</h3>
<p>可惜的是只是AviUtl主文件夹内部的表示，表示文件范围是exa,exo,obj和exedit.ini里面指定了的格式，不过拖动还挺方便的，最主要的是直接在AUL里面查看文件，不用又翻文件夹把电脑搞乱了。</p>
<p>(要不以后就像pycharm那样每一个工程来一个AUL环境然后素材全放里面？)</p>
<h2 id="物件">物件</h2>
<h3 id="gcmdrop">GCMDROP</h3>
<p>是一个可以从网页拖进时间轴任何东西的插件，之前下载psdtool时附带的。</p>
<p>拖拽的非文字文件会在工程aup保存的地方下载下来保存。</p>
<h3 id="扩张toolbar"><a href="https://aoytsk.blog.jp/aviutl/422768.html">扩张toolbar</a>（★★★）</h3>
<p>将一些常用项目放在一个图形窗口里面直接点击调用。</p>
<p>直接拖动物件和属性。绿色拖进时间轴，蓝色拖进物件属性栏。</p>
<p>用过都说好。</p>
<h3 id="psdtool-tik"><a href="https://github.com/oov/aviutl_psdtoolkit">psdtool tik</a>(★★★★★)</h3>
<p>这个是做voiceroid动画几乎不能离的插件，之后会单独讲解。</p>
<h2 id="功能附加">功能附加</h2>
<h3 id="简单录音"><a href="http://aoytsk.blog.jp/aviutl/1677824.html">简单录音</a></h3>
<h3 id="ram-preview"><a href="https://github.com/oov/aviutl_rampreview">RAM Preview</a>(★★★★★)</h3>
<p>在工程内效果过于复杂的时候进行预览会变得非常卡。</p>
<p>这个插件可以将选中的范围预先渲染到cache中，之后可以流畅预览。</p>
<p>下载之后解压放在Plugins里面，在设定里面选择RAM preview设定，然后就可以在对应窗口选择参数进行解析存入RAM。</p>
<p>注意这个适合小范围的查看，特效很高的几秒钟先RAM渲染一遍(或者四分之一解析度)看个大概，太长了太大了CPU和cache会吃不消的。也注意用完之后要将cache消去才能在窗口里面看见其他画面。</p>
<p>内存大小大概是一个无压缩的avi文件格式（就是几秒钟一个多g的那种）。通常品质除以4，二分之一解析度再除以4，四分之一解析度再除以4。AviUtl只是一个32位的软件所以请不要把内存塞满了。</p>
<h3 id="inputpipeplugin"><a href="https://github.com/amate/InputPipePlugin/releases/tag/v1.8">InPutPipePlugin</a>(★★★★)</h3>
<p>AviUtl是一个32位软件，能够占用的内存有限。在渲染一些大工程的时候会出现把内存占用完然后软件爆掉的情况。InPutPipePlugin可以将AviUtl占用的内存的一部分提出来放在L-SMASH里面。这样AviUtl出现宕机的可能就大大减小了。</p>
<p>解压后有效文件放在LSMASH插件相同的文件夹里面。入力优先度放在LSMASH上面就行了。</p>
<h3 id="vsthost4aviutl"><a href="https://github.com/Aios-Ciao/VSThost4aviutl">VSThost4aviutl</a>(★★★)</h3>
<p>通过外接32位VST插件来对音频进行修改，打破了AviUtl没有什么音频效果的尴尬局面。免费的32位VST插件还是挺多的找找看（虽然主流DAW基本上都用上64位VST了）。注意这里的插件必须要有自己的界面，airwindows那种没有gui的插件没有办法在这里显示。</p>
<h3 id="propertywindowfixerplugin"><a href="https://github.com/amate/PropertyWindowFixerPlugin">PropertyWindowFixerPlugin</a>(★★★★)</h3>
<p>很久以前组装AviUtl的时候见到的一个超好用的插件，作用是给物件属性栏加了一个滚动条，这样就可以不用改变物件属性栏的大小就可以添加效果了，非常实用非常实用。</p>
<p>还有一个singlewindow的插件可以把AUL多个窗口归一成一个窗口就像AEPR那样，但是个人使用感觉特别容易蹦就不写那个了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[AviUtl的其他导入导出插件]]></title>
        <id>https://hayashi1101.github.io/post/aviutl-de-qi-ta-dao-ru-dao-chu-cha-jian/</id>
        <link href="https://hayashi1101.github.io/post/aviutl-de-qi-ta-dao-ru-dao-chu-cha-jian/">
        </link>
        <updated>2021-10-20T14:30:32.000Z</updated>
        <content type="html"><![CDATA[<h2 id="导出插件">导出插件</h2>
<p>如果按照之前的攻略来一步一步做的话，AviUtl导出avi，mp4，mkv和264文件就足够，转换成其他文件格式也就一行命令的事。所以以下内容只是为了图方便的选读内容。</p>
<h3 id="かんたんmp4"><a href="https://aoytsk.blog.jp/aviutl/34586383.html">かんたんMP4</a></h3>
<p>就和它的名字一样，这个插件的作用就是简单输出一个MP4文件。</p>
<p>安装方式是将里面的easymp4.auo文件放在Plugins文件夹里面。</p>
<p>导出的时候在出力プラグイン里面选中，然后在ビデオ压缩里面设置简要参数就可以导出了(下面的方框打上勾的话就是GPU导出(？？？试了之后仍然是CPU导出啊))。优势......简单。试了一下虽然比264时间少了五分之一，但是导出的大小是264的1.5倍。减少画质量的话比起同大小的x264来说就糊了不少。总之......就是简单。在现在服务器容量那么高，不追求压缩体积的情况下，这样的插件可能就淘汰了吧。</p>
<h3 id="direct-animated-gif-export-plugin"><a href="https://onedrive.live.com/?authkey=%21AHg31ARXSfIHQUc&amp;id=26840CDF9818EB8E%21391&amp;cid=26840CDF9818EB8E">Direct Animated GIF Export Plugin</a></h3>
<p>可以把动画导出成gif的神器插件，神奇到电脑cpu持续100%了好久。</p>
<p>把文件里面除了src文件夹和readme的所有文件复制到主文件夹里面就安装好了。</p>
<p>属于是点了导出之后然后去刷微博，什么时候听见导出完了才想起还有这回事。除了专门追求gif特有画质格式以外应该也没什么大的用处。</p>
<h3 id="png出力"><a href="https://auls.client.jp/">png出力</a></h3>
<p>感觉上唯一能够有些用处的东西，可以把当前的帧导出为带alpha通道的png图片。</p>
<h3 id="nvenc"><a href="https://drive.google.com/drive/folders/0BzA4dIFteM2dS1ZUT1FjTnF3Q0E?resourcekey=0-MazKcdXBkeNqFbkV2wl2uA">NVenc</a></h3>
<p>这个是通过英伟达的显卡来对视频编码导出的，可以用GPU的工作量来代替一部分CPU的工作量。在渲染导出特别大的工程的时候能够节省五分之一的时间。<br>
显卡编码视频虽然快，缺点是画质没有直接用x264高，所以做一些小视频的时候还是建议用x264来编码。<br>
另外一套NVenc的编码器就有100多M，比刚才配完的AviUtl全部都要大了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于Aviutl的基本安装说明]]></title>
        <id>https://hayashi1101.github.io/post/guan-yu-aviutl-de-ji-ben-an-zhuang-shuo-ming1/</id>
        <link href="https://hayashi1101.github.io/post/guan-yu-aviutl-de-ji-ben-an-zhuang-shuo-ming1/">
        </link>
        <updated>2021-10-06T14:18:49.000Z</updated>
        <content type="html"><![CDATA[<p><strong>如果你是为了简单剪一个片子来找教程找完整软件的话那你可以关掉这个页面了，到叔叔站那里会有大佬给你整合包的，然后也有各种操作的教程。咱们也都互不浪费时间</strong></p>
<h2 id="前言">前言</h2>
<p>使用Aviutl来编辑视频差不多都快6年了，从以前做V家的PV到现在做VRO视频还是平常剪片子，基本上都没有离开这款软件。</p>
<p>发展到现在，Aviutl已经成一款比较成熟的视频工作站了（这个概念我是对比着Cubase这种音频工作站自己下的定义）。和adobe家的软件比起来它不吃资源，而且上手曲线前期极为平坦。更重要的是这是一款免费的编辑软件，从Ken神发布它之后就一直有大神在持续更新制作相关的插件(script)。对于这款软件的发展我是完全看好的(实际上单是现在已有的功能就已经能够满足大部分的剪辑需求了)。</p>
<p>但是现在来看这款软件在国内的学习资源并不多，在叔叔站这款软件在知识区也只有5页，这对于一款软件来说实在太少（当然尽管搬过来的AviUtl制作的PV还是挺多的，可以用这些来学习模仿以及观测Aviutl的上限）。所以决定在这里稍微写一下教程，从Aviutl的安装讲起，到里面的一些有意义的插件。</p>
<p>我并不是专业的视频制作人，其中所讲的可能也会有错误。制作视频除了工具以外更重要的是思想，关于如何将各个素材进行组合将整个制作流程向前推进的思想。这些我并不会讲，有需求可以去看凯文桑曾经发的视频<a href="https://www.bilibili.com/video/BV1zs41117zp?from=search&amp;seid=17432377695150750118&amp;spm_id_from=333.337.0.0">教练我想学系列</a>，那也是我梦的开始。</p>
<h2 id="日语">日语</h2>
<p>虽然在Aviutl里面有各种汉化版英化版，但是我还是推荐使用日文版进行入门。比起各种已经打包好了的软件，我更喜欢从头开始慢慢装，这样我知道里面每一个文件夹究竟是干什么的，每个插件是什么意思。以后的不断拓展也可以由自己完成甚至可以自己写script来满足自己的需要。同时日语版也一定是最快更新的（尤其是19年谁也没有想到时隔六年会把本体更新了）。</p>
<p>所以这里面的要求是你需要有一定的日语基础，什么样的基础呢？就是要有日语的汉字向中文汉字翻译的能力，以及片假名的阅读能力，然后平假名能rua过去就rua过去实在不行再查字典的水平。比如<strong>拡張編集</strong>你要反应过来叫做<strong>扩张编辑</strong>，<strong>設定</strong>要反应过来叫<strong>设定</strong>，<strong>サイズ</strong>你要熟练把它读成赛子然后反应过来是<strong>size</strong>的意思，<strong>ファイル</strong>读成发一了然后反应过来是<strong>file</strong>的意思。<s>现在你已经基本上掌握日语了，让我们一起来翻译这篇《<strong>歌声の合成における応用技術</strong>》吧</s></p>
<h2 id="高级网术">高级网术</h2>
<p>很遗憾在这个教程里面这个是必须的，里面存在一些需要高级网术才能够继续的安装环境（x264），也有一些只能通过高级网术观察的网站。这个是自身的能力，我并不会教授怎么使用。</p>
<h2 id="开始安装">开始安装</h2>
<h3 id="日语环境">日语环境</h3>
<p>因为日语电脑和中文电脑的编码不同，如果你的windows是中文的话，那么使用日文软件有一定概率是会乱码的，就想你玩只看CG不管剧情的日语游戏一样。这个时候解决办法有两个：</p>
<h4 id="系统变更">系统变更</h4>
<p>直接将电脑转换成日语环境。在<strong>设置</strong>里面的<strong>时间和语言</strong>里面进行设置。<strong>语言</strong>下面的超链接里面有一个<strong>管理语言设置</strong>，点进去出现了一个<strong>区域</strong>的窗口，选择窗口页面上方的<strong>管理</strong>，在<strong>非Unicode程序的语言</strong>里面找到**日语(日本)**然后重启就行了。</p>
<p>理论上来说毫无破绽但是考虑到你可能会用到其他的中文软件，这样的话又要重新在里面切换重启。所以是否这样做请自行决定。顺便一说我的电脑里面因为经常要用Cevio和Domino而且写论文都在leafover上面所以是日语环境，暂时没有遇到乱码的情况（压缩包乱码之类的请用360压缩选择语言）。</p>
<h4 id="locale-emulator">Locale Emulator</h4>
<p>第二种办法是使用<a href="https://github.com/xupefei/Locale-Emulator/releases">Locale emulator</a>,相当于在中文环境的电脑里面强制让软件使用日语环境来跑。请点进链接选择一个稳定的版本的zip文件进行下载。解压缩之后选中里面的LEInstaller.exe一键安装。</p>
<p>安装结束后您右键点击软件之后出现的菜单中多了一个Locale Emulator的黄色L图标，按您自己的情况选择第一个或者第二个来运行软件即可。</p>
<h3 id="主体安装">主体安装</h3>
<h4 id="aviutl">Aviutl</h4>
<p>到<a href="http://spring-fragrance.mints.ne.jp/aviutl/">AviUtl的部屋</a>里面进行安装，这个是Ken的发布压面，同时里面还会有其他资源和相关链接。</p>
<p>首先是AviUtl的下载，选择上面的稳定版本(2021年10月5日，此时用的是19年10月更新的1.10版本)。</p>
<figure data-type="image" tabindex="1"><img src="https://hayashi1101.github.io/post-images/1662042258751.png" alt="" loading="lazy"></figure>
<p>此时打开AviUtl，会发现这几乎只是一个空壳，什么也没法做。</p>
<h4 id="exedit92">exedit92</h4>
<p>回到部屋，对<strong>拡張編集Plugin</strong>进行下载。选择上面的稳定版本(2021年10月5日，此时用的是13年7月更新的0.92版本)。注意如果你的片假名过关的话你会发现下面有一个test版本的0.93，如果没有十足的把握的话不要下载这个版本，就我而言因为一直使用的PSDTOOL明确说了0.93里面有Bug所以也不敢用。（当然如果你看着片文章的时候0.93已经放在0.92的上面了，请直接下载上面版本号最高的就行了）。</p>
<p>解压缩之后直接放到刚才解压缩的AvuUtl110文件夹里面。此时你的文件夹大概长这样</p>
<figure data-type="image" tabindex="2"><img src="https://hayashi1101.github.io/post-images/1662042266041.png" alt="" loading="lazy"></figure>
<p>(可能你的文件夹里面没有选中的东西比我的要少，这是因为刚才鼓捣了一会儿本体自动写了一些文件出来)</p>
<figure data-type="image" tabindex="3"><img src="https://hayashi1101.github.io/post-images/1662042276399.png" alt="" loading="lazy"></figure>
<p>再次打开软件本体，<strong>设定</strong>里面选择<strong>扩张编辑的设定</strong>然后就出现了一般视频编辑软件有的时间轴了。一般我们的时间大部分都用在在时间轴上面摆放物件。</p>
<p><img src="https://hayashi1101.github.io/post-images/1662042287523.png" alt="" loading="lazy">![[Snipaste_2021-10-05_20-14-39.png]]</p>
<p>此时我们已经可以在上面摆放各种物件了，实时在上面摆放一些test文件，或者摆放一个图形(右键点击时间轴选择第一个media object追加)。但是这个时候我们发现我们没有办法加入一般的动画文件画像文件和音频文件。再加入的时候我们发现此时的Aviutl只认识这些文件格式。一般使用的MP4格式啊MP3格式啊都没有。这个时候我们要来再次扩展插件。</p>
<h4 id="l-smash-works">L-Smash works</h4>
<p>这个插件就是针对刚才所遇到的问题进行的拓展，使得MP4和MP3等文件能够被读取。<strong>L-Smash works 940</strong>可以在<a href="https://pop.4-bit.jp/">RePOPn</a>大神的博客里面下载到。然后回来了，发现海外人民没有办法下载到这个插件......于是我找到了之前放在Plugin文件夹里面的文件，可能是935版本的。<strong>在AviUtl主文件夹里面创建一个Plugins文件夹</strong>，然后把L-SMASH WORK的那四个文件放到Plugins文件夹里面即可</p>
<h4 id="x264guiex">x264guiEx</h4>
<p>这个插件是用来对视频进行解码的，可以在视频导出的时候用到</p>
<p>请去<a href="https://rigaya34589.blog.fc2.com/blog-category-5.html">rigaya</a>大神的博客里面寻找相关的词汇，然后找到最新版本进行下载(2021年10月5日，此时用的是21年7月更新的2.67版本)</p>
<p>解压缩之后点进去，里面有一个auoSetup.exe（是主文件夹，不是setup文件夹）点进去，命令栏会加载一会儿。选择这个Aviutl所在的文件夹进行插件安装。注意因为刚才创建了一个Plugins文件夹（特别重要），所以安装的插件全部到那个文件夹里面去了。此时Plugins文件夹长这样</p>
<p><img src="https://hayashi1101.github.io/post-images/1662042336313.png" alt="" loading="lazy">![[Snipaste_2021-10-05_21-11-22.png]]</p>
<p>这个时候打开软件本体，试着把刚刚从<a href="https://mazwai.com/">mazwai</a>下载下来的免费素材导入进去，成功了。点击播放（空格），甚至还会跳出来一个播放窗口，这样就表示aviutl的基本设置成功了。</p>
<h4 id="directshow-file-reader"><a href="https://videoinfo.tenchi.ne.jp/?DirectShow%20File%20Reader%20%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3%20for%20AviUtl">DirectShow File Reader</a></h4>
<p>还有一个和LSMASHWORK很像的插件，一些lsmashwork不能导入的文件可以使用这个插件进行导入，安装的方法和LSMASHWORK一样都是解压缩把程序放在Plugins里面。</p>
<h2 id="基本设置">基本设置</h2>
<h3 id="系统设置">系统设置</h3>
<p>我们先摸到系统设置里面</p>
<p><img src="https://hayashi1101.github.io/post-images/1662042351335.png" alt="" loading="lazy">![[Snipaste_2021-10-05_21-15-51.png]]</p>
<p>第一行最大画像是视频的最大尺寸，如果想做4k视频就再调大一点</p>
<p>第四行设定解像度list是要把做视频常用的分辨率写进去，这里现在基本都挺全的，如果不做大视频也不用管。</p>
<p>上半部分建议把倒数第二个方框打上勾，这样就不会出现多的播放窗口，直接就在主播放窗口播出了。<br>
<img src="https://hayashi1101.github.io/post-images/1662042370625.png" alt="" loading="lazy">![[Snipaste_2021-10-05_21-34-52.png]]</p>
<p>下半部分倒数第八个方框打上勾，这样在编辑的时候如果关闭窗口就会提醒你当前的数据不保存的话会丢失。（血的教训，所以请务必勾上。但是这个提示框本身是没有保存功能的，想要保存工程文件请在编辑的过程中时时注意）<br>
<img src="https://hayashi1101.github.io/post-images/1662042386895.png" alt="" loading="lazy">![[Snipaste_2021-10-05_21-37-25.png]]<br>
下半部分再把倒数第二个勾选上，这样就开起了窗口吸附功能。还是挺便利的。</p>
<p>差不多设置完了之后整体长这样：</p>
<p><img src="https://hayashi1101.github.io/post-images/1662042397060.png" alt="" loading="lazy">![[Snipaste_2021-10-05_21-41-39.png]]<br>
其他的选项也可以以后再看。</p>
<h3 id="入力优先度设定">入力优先度设定</h3>
<p><img src="https://hayashi1101.github.io/post-images/1662042407568.png" alt="" loading="lazy">![[Snipaste_2021-10-05_21-24-16 1.png]]</p>
<p><img src="https://hayashi1101.github.io/post-images/1662042415769.png" alt="" loading="lazy">![[Snipaste_2021-10-05_21-25-48.png]]<br>
AviUtl的入力优先设定之后加入的文件会按照优先度的顺序来读取，如果上一个插件无法读取，则试用下一个插件。</p>
<p>这里主要的是DirectShow File Reader放在L-SMASH的后面。根据说明记载使用L-SMASH比起DS“安定していて動作も軽快なので”，所以优先使用L-SMASH，在L-SMASH出问题了之后备用DS导入素材。</p>
<h3 id="exeditini2021年10月20日">exedit.ini(2021年10月20日)</h3>
<p>在AviUtl的主文件夹里面有一个exedit.ini，这个是时间轴之类的基础拓展的配置文件，里面显示了哪些文件可以直接被拖进时间轴。比如刚才安装了L-SMASH之后mov之类的文件可以被导入，直接拖进时间轴的话没有任何效果，这样作为没有媒体池的动画编辑软件来说效率就降低了。所以我们按照现有的文件格式按部就班将自己大致需要的文件格式添加上去，比如.mov=動画ファイル。一个完整的ini大概长这样：</p>
<pre><code>[extension]
; 拡張子とメディアオブジェクトの種類を関連付けます
.avi=動画ファイル
.avi=音声ファイル
.mpg=動画ファイル
.mpg=音声ファイル
.mkv=動画ファイル
.mkv=音声ファイル
.mp4=動画ファイル
.mp4=音声ファイル
.avs=音声ファイル
.avs=動画ファイル
.flv=動画ファイル
.flv=音声ファイル
.dv=動画ファイル
.bmp=画像ファイル
.jpg=画像ファイル
.jpeg=画像ファイル
.png=画像ファイル
.gif=動画ファイル
.ico=画像ファイル
.wav=音声ファイル
.mp3=音声ファイル
.txt=テキスト
.flac=音声ファイル
.aac=音声ファイル
.ape=音声ファイル
.m4a=音声ファイル
.ac3=音声ファイル
.lpcm=音声ファイル
.wma=音声ファイル
.pcm=音声ファイル
.ogg=音声ファイル
.opus=音声ファイル
.h264=動画ファイル
.x264=動画ファイル
.avc1=動画ファイル
.h265=動画ファイル
.x265=動画ファイル
.ts=動画ファイル
.ts=音声ファイル
.m2t=動画ファイル
.m2t=音声ファイル
.wmv=動画ファイル
.wmv=音声ファイル
.rmvb=動画ファイル
.rmvb=音声ファイル
.mts=動画ファイル
.mts=音声ファイル
.mov=動画ファイル
.mov=音声ファイル
.mjpeg=動画ファイル
.mjpeg=音声ファイル
.m2ts=動画ファイル
.m2ts=音声ファイル
.vob=動画ファイル
.vob=音声ファイル
.webm=動画ファイル
.webm=音声ファイル
.3gp=動画ファイル
.3gp=音声ファイル
.asf=動画ファイル
.asf=音声ファイル
.y4m=動画ファイル
.y4m=音声ファイル
.swf=動画ファイル
.swf=音声ファイル


[script]
dll=lua51.dll

</code></pre>
<p>一些自己肯定用不到的文件可以不用加，但是mov,wmv这种还是加上为好，并且注意里面的.gif链接的是画像文件，要改成动画文件，不然文件没法动。下面的练手就因为没有提前配置ini文件导致mov拖不进去。</p>
<h2 id="简单的练手">简单的练手</h2>
<p>配置好了软件，我们来稍微试着做一个简单的视频吧。</p>
<p>这次我们来从mazwai下载两个视频，组合在一起，然后加一些文字，然后导出吧。</p>
<p>做完了吗。所以我们完成了剪辑里面基本的各种素材添加，简单加工最终导出的普遍流程。</p>
<p>实际上默认导出所有内容的话是不需要用shift来进行勾选的。</p>
<p>另外刚才在实际重新配置Aviutl的时候出现了就连重启电脑也没法挽救的错误，最终重新搭了一遍。如果你发现了任何搞不定的软件内的问题，在前面的步骤都没有错误的情况下建议再来一遍。</p>
<p>配置完了一遍基本的aviutl我们回到主文件夹里面看一看这个程序的大小，发现这个几乎能够把基本剪辑的事情都干完还自带各种官方特效的软件容量才不到30M。比起某些付费还吃显卡经常崩溃的软件不是亲切多了吗。</p>
<h2 id="后序">后序</h2>
<p>于是简单的三千字的Aviutl基础装备就这样完成了。这里面可能需要你做出比把文件解压缩放在主文件夹里面更多的东西，比如去找一个不是太卡的梯子，去看一下文件夹的构成，去网页里面稍微看一下各种插件的功能。感受一下如同历史一样的一个东西从无到有，又因为各种缺陷而得到各种提升的过程。</p>
<p>刚才我在各种物件的属性框右上角的加号上面选择了フェード，也就是渐进效果fade。那个加号里面有所有剪辑以外的对于物件的效果，一般视频的大部分内容都由它们来完成。也请读者们去尝试一下里面的各种效果。</p>
<p>之前说到了凯文桑的视频，他16年左右也有另外一个更新叫<a href="https://www.bilibili.com/video/BV17x411Q79b">每天一个新技能</a>，分享一些基础的小技巧，这也是我见过的国内Aviutl质量最高的教程了，现在好多做Aviutl的大佬都是当年的群友学员，有空也请去看一下。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[倾听画语 ]]></title>
        <id>https://hayashi1101.github.io/post/qing-ting-hua-yu/</id>
        <link href="https://hayashi1101.github.io/post/qing-ting-hua-yu/">
        </link>
        <updated>2021-09-20T14:09:36.000Z</updated>
        <content type="html"><![CDATA[<p>之前看谜之声玩的游戏，看了一半，感觉时长和题材都挺符合，就买来自己玩了。</p>
<p>是一个关于画与相遇的故事。</p>
<p>我很喜欢里面的动画过场，就和电影一样。而动画与游戏场景的融合，我好像便融入了这场一个小时的电影中去了。</p>
<p>对于女主来说，她便是困在了画框之中的人，这对于她的存在是理所当然的。她是他内心真挚的爱慕，是他对于相遇之人短暂相处之中的理想形象。于是女主在仅有的空间和自己被赋予的短暂的记忆中开始寻找他的这段相遇。</p>
<p>故事是这样的。咖啡，早餐，录音机，慵懒的阳台和慵懒的猫猫结合在一起的日常与咖啡馆，薰衣草，雨景下的街边招牌的浪漫相结合，相呼应。将故事像溪水一般理所当然地前行。</p>
<p>即使是里面最大的矛盾，也就是宣告她的离开，也是不多着笔墨的短短几秒钟的场景，平静而又自然，邂逅在这里终结。</p>
<p>平静吗？不然。否则他不会用一生的时间来创造出女主这样的形象。</p>
<p>遗憾吗？对于看到最后的我们来说是的。女主是男主在晚年对于曾经相遇之人的想象刻画，也表明了两人不再相遇。唯有最后男主过世，在他的画展上她出现了，同样是满头白发，归还了他的画笔。</p>
<p>看到最后有一种说不出的酸痛，大概的原因是时间跨度之大而产生的冲突吧。玩的时候关着灯，只有电脑的光闪烁着。前面的场景还是在薰衣草场两人的邂逅，后面找到了真相后等来的只有两人的衰老与不再相遇。再次体会到一种冲突与无力感。</p>
<p>唯一保持年轻的，是女主，是他想象中的她的最美好的相貌。尽管时间瞬息万变，美好的记忆永远漂流在时间的河流中，等待着被发现。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[同一片星空，五年前的你是否能够看到呢]]></title>
        <id>https://hayashi1101.github.io/post/tong-yi-pian-xing-kong-wu-nian-qian-de-ni-shi-fou-neng-gou-kan-dao-ni/</id>
        <link href="https://hayashi1101.github.io/post/tong-yi-pian-xing-kong-wu-nian-qian-de-ni-shi-fou-neng-gou-kan-dao-ni/">
        </link>
        <updated>2021-09-01T14:00:38.000Z</updated>
        <content type="html"><![CDATA[<p>之前在火车上面没事把很早之前看的轻小说重新翻开了，拿着退化了几个等级的日语继续读了下去。读的是星空の下、君の声だけを抱きしめる。购买的契机是2020年暑假bookwalker大甩卖。</p>
<p>读下来的整体感受其实挺一般。以为是文化的原因，去网上查了查分数发现是4.1分，对于bookwalker上面的轻小说来说已经是十分普通的分数了。</p>
<p>（接下来全文剧透）</p>
<p>首先是题材的问题，发现自己能够通过手机和五年前的女生交流。最近最大最广众的既视感可能就是新海诚的你的名字了。而这篇小说是2018年写的。这样的题材放在2016年之前的话可能会让读者眼前一亮，但现在确是不会了。</p>
<p>男主和五年前居住在叔父家的常遭姐姐欺负的女孩子聊上了话。男主是文艺部的主干（虽然不写文章但事实唯一干活的），女生因此不仅帮男主完成了部刊免遭废部，而且还帮助男主写剧本给班上演，最后通过献声的方式与男主同台表演。男主约女孩出来玩时发现了时差5年的问题。女主在地下埋藏了自制的男主的演出公仔作为五年后的男主的生日礼物。</p>
<p>（然后剧情高潮）</p>
<p>男主打听到女主的消息前往叔父家见到女主的姐姐，姐姐告诉他女主在五年前的今天因为暴风雨走了。男主不甘前往女主失踪的地方，同时下起了暴风雨。电话响起，女主还活着（五年前），一阵光把男主从现在传送到五年前的女主的身边制止了她向暴风雨走去。带女主走下田地后躲过了一辆卡车。然后男主一个不小心掉悬崖了。</p>
<p>然后男主传送回来了，会长叫了救护车救了他。原来会长就是五年前和他交流的女主。她被男主救了后男主掉下悬崖她没有找到，她知道男主传送回去了于是等了男主整整五年。期间一直按照“剧本”过下去，为了让男主五年后到特定场所还让姐姐帮着撒谎说自己已经死了还不能暴露。每次和男主见面都强忍着嬉しすぎる的心情。最后真相大白，双方相互诉说着感情，迎来结局。</p>
<p>可喜可贺，可喜可贺。</p>
<p>但是问题是真想出来的时候我们会恍然大悟吗？不会，因为轻小说的彩色插图是放在最开头的，怎么说会长的彩图都占了大多数，而且啊最重要的封面就是会长，ena还能是除了她的其他人吗——？</p>
<p>另外一开始没搞懂的是那个穿越的逻辑，照理说男主在回到之前的状态时，女主应该是属于薛定谔的状态的。但是想起来似乎之前女主的死活也是有前例的。像《你的名字》的女主便是向着灾难发生的方向走的（第一次陨石来的时候），而像凉宫春日的剧情则是在先有未来的囧回来帮助创造怪圈为前提发展的，囧的视角看待自己一会儿回去帮助团长就和这篇小说男主一会儿回去救会长是一样的。确实是两种不同的道路选择了后者，于是我也不去多纠结了。但是这里的穿越也太含糊了吧，真就一道光就穿走了（算了，毕竟都能跨时空通话了还在意什么呢）。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[喂猫]]></title>
        <id>https://hayashi1101.github.io/post/wei-mao/</id>
        <link href="https://hayashi1101.github.io/post/wei-mao/">
        </link>
        <updated>2020-09-01T13:55:44.000Z</updated>
        <content type="html"><![CDATA[<p>稍微舒了一口气，做完了工作。夜过了十二点。整理了屋子，关上灯，拿着一条鱼干去喂猫。</p>
<p>那猫很奇怪，不是那种在路上埋伏着拿着卷饼的学生前去蹭腿乞得一点食物的校园猫。虽然会吃人类给予的食物，但从来放不下自有的野性与尊严。讨好一般的给予食物它是从来都不屑的，它与人类从来没有过直接的接触。一次次吓跑猫之后我开始了解了它的习性，并按照它的爱好进行这一猫与食物之间的游戏。</p>
<p>橘色的灯光十分温暖，我在无人的街道走着。它若是不出现，就当这就是睡前的散步。幸运的是最终它还是出现了，脚垫踏在了叶子上的规律节奏提醒了我。但是，不要回头，接着往前面走。</p>
<p>那是一只长什么样的猫？不知道，每一次好奇而回头只能看见猫迅速窜入草丛中的影子，这一天便再也见不到。或许是只普通的三色猫？亦或许是一只万圣节应景的黑猫，深邃如同它的影子。我只能在脑中想象，想象它的颜色，它轻盈的体态。听着它偶尔发出的声音，想象它沿着草丛的边缘跟着我，一人一猫在橘色的灯光下漫走。对猫而言这是饭前的游戏，规则是不要惊动前方的食物。对我而言这是游戏，规则是不要让猫发现我感知到了它。</p>
<p>前方是岔路口。按照游戏规则，我不小心将鱼干落在了岔路口，没有发现，走左边的路绕一大圈回公寓，准备完成散步回去睡觉。右边路口的轻微的脚步声急促起来，并排超过了我，消失在了远方。</p>
<p>第二天骑车去丁香过早，路过岔路口。昨天晚上有人散步的时候不小心掉了枚鱼干在这里，没了踪影。兴许是被猫吃了。一只长什么样的猫？没有人说得出。</p>
<p>“”我常常把音乐的灵感当做野良猫，不仅仅是因为它经常在不经意的时候出现（物理课），更是因为它的记录方式的不同。不同于文字项目类灵感的那种越写越来劲，（因为个人基本功不扎实）音乐灵感的记录不仅是输出，更多还有标准音测试音的输入。这种输入就是对灵感造成破坏的来源，其威力不低于啥也不干就睡一觉。</p>
<p>这种灵感大多是睡眠质量欠佳的产物(以及物理课），为了保护状态和灵感都不受干扰得戴上耳塞，让自己平静地浮在半睡半醒之间的一个平面。这个时候灵感来了，就像猫一样。不能兴奋地清醒过来迎接灵感，而是保持原来的状态任它在身边徘徊重复。接着灵感便开始延伸。整个过程不需要过多人为去改变，哪怕产出是已有的乐段。人为能够做的只有保持状态，然后重复，自然而然又会接着延伸。不可能记住所有，但是尽量去重复。</p>
<p>然后尽量保持那种状态（举个例子，看完整套《三体》的那个晚上，刷牙洗澡一直睡不着到第二天啥也想不了脑海里都只有一片宇宙），安静地拿上iPad，打开cubasis，用提前准备好的”尽量不会对自己脑内造成太大干扰“的音源调小音量到刚好无障碍听到，扶几个音找到标准音开始录midi(有特殊不能记录midi但很重要的先写在notepad上）。若是运气不佳录错了几个音再反复修改可能也就不是原来的灵感了，之后还有什么片段也因为清醒过来就记不住了。所以视听练唱的练习真的蛮重要的，谁都希望一支笔一张纸五线谱也好简谱也好把灵感记下，这样物理课也不用愁没事情干了。&quot;&quot;</p>
<p>PS：文章的写作日期是2020年9月3日，当时正在出租的屋子里面办理休学后的复学手续。住在D楼好像是。家属区的生态确实是特别好，但是当时没有太融入进去，每天都待在屋子里面刷日语题目。是不是真的有那样的一只猫我现在已经忘记了，毕竟校园里面的猫真的就像是上面说的那样一个劲儿地扒别人的推，能够想出这样的角色究竟是因为真的有一只这样的猫还是说当时真的在记录灵感的时候迷失了方向。这谁也说不清楚。</p>
<p>PS2：为什么会把这篇文章拿出来呢，因为写完这篇文章后我就把它放在qq日记里面了，因为不符合个人特性就把它藏了起来，然后发现重新找回这篇文章需要独立密码，以至于现在绑定了收集之后才找回这篇文章。</p>
<p>PS2：这一次的封面选择的是<a href="https://www.nicovideo.jp/watch/sm20332640">赤髪的《黒猫》</a>，当时第一次听的版本是<a href="https://www.nicovideo.jp/watch/sm25203174">花碳</a>唱的，十分震撼。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[虽然不是什么么文人学者，但是...]]></title>
        <id>https://hayashi1101.github.io/post/sui-ran-bu-shi-shi-me-me-wen-ren-xue-zhe-dan-shi/</id>
        <link href="https://hayashi1101.github.io/post/sui-ran-bu-shi-shi-me-me-wen-ren-xue-zhe-dan-shi/">
        </link>
        <updated>2020-08-06T15:09:32.000Z</updated>
        <content type="html"><![CDATA[<p>虽然不是什么么文人学者，但是始终对文字构词相当敏感，导致成为了巴托比。同时因此很少听中文歌，因为会不由得去在意其中的歌词，小结最后一个字很明显不适合这个元音会很烦，太二次元会很烦，太过于堆词很烦，没事在中文歌词中拿中文唱了一个显然是中文没有的日语词也很烦。抱着抱着六七年前的歌洗耳朵，也暂时没了做中文曲的打算。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[灵感：世界上最值钱的介质是什么...]]></title>
        <id>https://hayashi1101.github.io/post/ling-gan-shi-jie-shang-zui-zhi-qian-de-jie-zhi-shi-shi-me/</id>
        <link href="https://hayashi1101.github.io/post/ling-gan-shi-jie-shang-zui-zhi-qian-de-jie-zhi-shi-shi-me/">
        </link>
        <updated>2020-07-24T15:07:19.000Z</updated>
        <content type="html"><![CDATA[<p>灵感：世界上最值钱的介质是什么？是金刚石，是花岗岩。只有贵族能够花毕生所储，买下一小块石板，伫立在自己的坟前，尽可能的记录自己。<br>
这个世界，信息储存技术达到了尽头，人们惊讶地发现并不是自己无法制造信息塔，而是原料在极度的浪费中所剩无几。介质在任意地被读取和写入下逐渐老化以至于报废。人们开始重新思考曾经他们用这些晶体制作了什么。<br>
垃圾远大于内—这是上一个信息爆发时代给他们留下的印象，曾经只需要一小块金属片就可以记叙整个人类，如今全球的原材料无法再供人类进行更多读些。<br>
政府开始管制整个网络，他们从大量的信息复制入手。九成的的魔方拥有者根本不会魔方，于是魔方的原材料消耗量因为自大与好奇增加了九倍。网传下载量上亿的免版权阅读数据库不仅有epub还有Kindle版，甚至每本还有剪影版pdf。国际刑警开始大量追查下载者，签下速令一定会看完其中哪些书，但凡没有把握统统数据销毁。<br>
他们开始追查游戏，视频中的无授权素材。控制学者对电子书的下载，严查使用ia大量制作无意义文章的营销号，让免费开源制作者收回其他人软件使用权，为政府登记专业制作者使用。<br>
还能再减，大量的ui可以完全消去。<br>
还能再减，人们每天在个人网页发的食物图比文字不知高出多少。<br>
还能再减，<br>
还能再减，。<br>
P.S.一开始对于许多爱装逼人士没事儿就喜欢在电脑上下载一堆adobe全家桶，下个水果在电脑里面坐月子感到哭笑不得，明明剪个视频画个画几十兆的软件也能用（公开表扬aul）甚至根本不用就是装逼（尽管我知道毕竟是自己买的硬盘怎么存别人都管不着）。我是信息极端干净者，除了自己记录自己的话又臭又长以外，对信息储存是非常的。<br>
就是这些轮子，用得到的能用它们创造世界，但本来用不到的却占了大多数，想想仓库里塞满轮胎那样。大量的储存有余惯时了大量网络使用者，开始疯狂向上面写些完全没有任何价值的东西，以营销号和僵尸为最盛。最大问题当然并不是储存不足，而是更现实的百度谷歌不到自己想要的，这样一来整个网络对于众人来说都只是多巴胺生成器罢了。</p>
]]></content>
    </entry>
</feed>